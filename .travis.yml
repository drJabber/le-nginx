services: docker
language: bash
install:
  - env | sort
  - git clone https://github.com/docker-library/official-images.git ~/official-images
  - docker run -it --rm --name dfupdate --mount type=bind,source=${PWD},target=/data/ -w /data snw35/dfupdate:latest
  - if [[ $(git status --porcelain | wc -l) -eq 0 ]] && [[ -z ${TRAVIS_TAG} ]]; then
      echo "No local changes detected and no tag set, nothing to build, exiting.";
      travis_terminate 0;
    else
      echo "Local changes or tagged commit detected, continuing...";
    fi

before_script:
  - BASE_VERSION=`grep "FROM" Dockerfile | cut -d " " -f 2 | cut -d ":" -f 2`
  - IMAGE="${TRAVIS_REPO_SLUG}:${BASE_VERSION}"
  - PROPOSED_TAG=${BASE_VERSION}
  - git config --local user.name "${DOCKER_USERNAME}"
  - git config --local user.email "snw35@use.startmail.com"
  - git remote add upstream https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git > /dev/null 2>&1
  - if [ $(git ls-remote --tags upstream "${PROPOSED_TAG}" | wc -l) -eq 0 ]; then
      echo "Propsoed tag does not exist on remote, continuing.";
    else
      echo "Proposed tag already exists on remote, skipping container build.";
      travis_terminate 0;
    fi

script:
  - env | sort
  - travis_retry docker build -t "$IMAGE" .
  - ~/official-images/test/run.sh "$IMAGE" || travis_terminate 1;
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - docker push "$IMAGE"
  - docker tag "$IMAGE" "${TRAVIS_REPO_SLUG}:latest"
  - docker push "${TRAVIS_REPO_SLUG}:latest"

after_script:
  - docker images

before_deploy:
  - git checkout master
  - git add -A
  - git commit --message "Software Updated"
  - git tag $PROPOSED_TAG
  - git push --quiet --set-upstream upstream
  - git push --tags --quiet --set-upstream upstream

deploy:
  provider: releases
  api_key: $GH_TOKEN
  skip_cleanup: true
  body: >
    base image version: $BASE_VERSION
    image deployed: $IMAGE

branches:
  except:
    - /^untagged/

env:
  global:
  - secure: RnBT/gG/hyq0APNT6MrKG1SbIXu/ler5b+CvOS7x61eqOI66uh+yXzedqoSlM1W9nSiMQ+JwB+br634FHlP2xolncD02qqPFNFxNYsVaFr8IGNoZKFBSYjR/aXidaQqTZDugHB2bgUye5c8H3fmM0MmQv5YDwUxutKe1drMg1PRhXhWsep//jd9QPfB7YKGQ1BDRZG53hf/oKSjPSQ8SyNjl4LLnyqDrdehweHadNCq0hhXS7YSM4LDj96wdNIZSLD364N4HrdavTHuXy0pNzzj9ncWitwhSgzTP4Xo00KH04rNQKIDRmRgs5H18WcNvalYPaksRKdc5xsFeNe/4TNIEalrNaly/d5JiZU/cqBSXiJwvxuee+IIL5soN0y72VSi02zF3B744UlRow1wfTJObFlSHl5BkDglq8T7e8oXQBO3AhudsvfDB0lL5FvW2Kib2WmThMD+Ria1fQ5EBxPGgoz1g/ZaZxRSqzLmr0FZaOFRHFH1gS4OjoBmyFwIl5TKR3Y9/+BsEYhraOOJHpqsRmohLApE/2x9nSer5Yvvkom3wnmPfwh8MHHPtaa6n70mQpDA5RU8XIQEcjpSubsJaK+fE0VJccuFkCFWGTcOBwIKlPcj8qBcz1/g3LdtvalN6ZM8TukRmREp69QXVl1F7uFkeHGPx3dK50tGcOw0=
  - secure: PAjlJb+NoNKU22CtcjHTZ17rscd53VXKT+gn+TlP9YQ6UyaoDIfQFCKcHc6ZepGz13HCZ2OrPWJANnWPFn0XgggsWG56jNInDb3pLhuK9apX7W9kmUssYZU9b54cuIEssDjzL1suLZd7fLBoSGknw5/KHRBPu9QxN9UKgpZKKjp/gzD2MbcKRb4bm/6m7TJrSRIcdWoZsoHtAMT3jr/OWUI/5+l8Mh4/n4DAL2VWp+pZ2sCkwXemKLn5q6zLQ2BMz0ngm7N+j5oz32az7NtQykpexqFCmMiAbrZy2Nc3IUgDEuzE9gnPiiBiC6B9S+qCFksiEaSK4AwY0zp84Iwayjd+AkAixJjPehp4fJxjQVN6HfNC0T/4hNftyB7Pa537RCskx38jQ9CoE1XD2vNfeTpZ4CHZUG34XglsAHsxP9XQwY8Bxfqy/3bOTHvLEi48ks9E270x1PdVum7uLE2yUcmsQs3d6QS7b7lTy7pedKs5Vn5DbkNPM8xNiHswsIvPbjwO0txPzeXJWNUKdVQhvCACZmjppWQFkNr1sFVkVcstJIu40hjpEz26+lOQNVCCNDZPHxLoJ8YjqrkBF5amlJ04bsqB2xgi5DuThH4BR1wpomZVi2HprihAHFbx2347pcH90LVfFELjHmKTifc5yTcH/pQ2P8lnoOsevkx9Ewc=
  - secure: xaDUYPxwK1uLsfxPqulRWltHNWx+5o8n5EI+ASBLcdhVRp9aHe6gZaCy7+S9u5z+dqjPsIVyoWm4ggzt+IO9ogrF7kOw9c7W/8f3OYHZAfE8XWiDbZynDHuUl/yMo/OYbHfNCzyunBO+T5ezof5L7OruBYSQP7i0UWoCyU5UT6ZFeIPBvn6M2o20PIBNGkugmBNOZEOLyLb7djtcaNyi8PkV/6vu0hxrTmHtFWWJigS0QO4wK7puuODM47c97acqa2tNfFJhhHVdvkn70BD30xdaMJw4SpvRpZd/Wdo5t94UnwY52IrmmpUprKOSDCzjtk6aTRclkfsOx5pUZlAm+l1jSeO3FhgBzyJMGJHsiV9ApHCJVrjqxn3ZNoZnCOBap3eCsUt+s947j4hHPj32vYiq9CEg1DmmNXf4YC1gDTPMnn4ZbW6FSxVX4mjsjdsCs9KPlb9GFTQy+SLEP8xe232p96a1mRjhZcWkEDtwTkKIzdmbxEQPSbx3vwbsEQfaILX83S9A7sRfv+jqg64zs+Bt/h6n3brrwC6DfMY/7nBSmI/U96qUk+yFeIoKWhzFyRneOppHm9KKTsIpx0u2MAec+XH1uVo6dnh32oSSEbLrTxlr0uvZncgU4G3yH8SqbOGzUjVmpWxuFUVykzl47PGSzvYyR7pPyzlgwoTDcoQ=
